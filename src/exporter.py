import json
import csv
from datetime import datetime
from typing import Dict,Any
from pathlib import Path


# Save results to txt file
def save_to_txt(result: Dict[str, Any], filepath: str) -> bool:
    
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write("=" * 60 + "\n")
            f.write("Security Header Checker Results\n")
            f.write("=" * 60 + "\n")
            f.write(f"Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"URL: {result['url']}\n")
            f.write(f"Total Score: {result['total_score']}/{result['max_score']}\n")
            f.write(f"Security Percentage: {(result['total_score'] / result['max_score'] * 100):.1f}%\n")

            # Detailed report
            f.write("Detailed Report:\n")
            f.write("-" * 60 + "\n")
            for header_name, header_data in result['headers'].items():
                f.write(f"{header_name}:\n")
                f.write(f"  Value: {header_data['value']}\n")
                f.write(f"  Status: {header_data['status']}\n")
                f.write(f"  Description: {header_data['description']}\n")
                f.write(f"  Score: {header_data['score']}\n")
                f.write("\n")
            
            # Summary
            f.write("Summary:\n")
            f.write("-" * 60 + "\n")
            f.write(f"✅ Well configured: {result['summary']['good']}\n")
            f.write(f"❌ Issues: {result['summary']['bad']}\n")
            f.write(f"ℹ️ Info: {result['summary']['info']}\n")
            f.write("-" * 60 + "\n")
            
            # Security assessment
            f.write("Security Assessment:\n")
            f.write("-" * 60 + "\n")
            f.write(f"Total Score: {result['total_score']}/{result['max_score']}\n")
            f.write(f"Security Percentage: {(result['total_score'] / result['max_score'] * 100):.1f}%\n")
            f.write("-" * 60 + "\n")
            
            # Footer
            f.write("=" * 60 + "\n")
            f.write("Generated by Security Header Checker\n")
            f.write("=" * 60 + "\n")
            
        return True


    except Exception as e:
        print(f"Error saving to txt: {e}")
        return False

# Save results to json file
def save_to_json(result: Dict[str, Any], filepath: str) -> bool:
    metadata = {
        'generated_at': datetime.now().isoformat(),
        'url': result['url'],
        'total_score': result['total_score'],
        'max_score': result['max_score'],
        'security_percentage': (result['total_score'] / result['max_score'] * 100),
    }
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=4, ensure_ascii=False)
            return True
        
    except Exception as e:
        print(f"Error saving to json: {e}")
        return False


# Save results to csv file
def save_to_csv(result: Dict[str, Any], filepath: str) -> bool:
    metadata = {
        'generated_at': datetime.now().isoformat(),
        'url': result['url'],
        'total_score': result['total_score'],
        'max_score': result['max_score'],
        'security_percentage': (result['total_score'] / result['max_score'] * 100),
    }
    data = []
    for header_name, header_data in result['headers'].items():
        data.append({
            'Header': header_name,
            'Value': header_data['value'],
            'Status': header_data['status'],
            'Description': header_data['description'],
            'Score': header_data['score'],
        })

    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            writer = csv.DictWriter(f, metadata.keys() + list(result['headers'].keys()))
            writer.writeheader()
            writer.writerows(data)
            return True
        
    except Exception as e:
        print(f"Error saving to csv: {e}")
        return False




def export_results(result: Dict[str, Any], filepath: str) -> bool:

    file_ext = Path(filepath).suffix.lower()

    if file_ext == '.txt':
        return save_to_txt(result, filepath)
    elif file_ext == '.json':
        return save_to_json(result, filepath)
    elif file_ext == '.csv':
        return save_to_csv(result, filepath)
    else:
        print(f"Error: Unsupported file extension: {file_ext}")
        return False